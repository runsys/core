// Code generated by "core generate ./testdata"; DO NOT EDIT.

package testdata

import (
	"cogentcore.org/core/tree"
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/tree/testdata.NodeEmbed", IDName: "node-embed", Doc: "NodeEmbed embeds tree.Node and adds a couple of fields.\nIt also has a directive processed by typegen.", Directives: []types.Directive{{Tool: "direct", Directive: "value"}}, Embeds: []types.Field{{Name: "NodeBase"}}, Fields: []types.Field{{Name: "Mbr1"}, {Name: "Mbr2"}}})

// NewNodeEmbed returns a new [NodeEmbed] with the given optional parent:
// NodeEmbed embeds tree.Node and adds a couple of fields.
// It also has a directive processed by typegen.
func NewNodeEmbed(parent ...tree.Node) *NodeEmbed { return tree.New[NodeEmbed](parent...) }

// SetMbr1 sets the [NodeEmbed.Mbr1]
func (t *NodeEmbed) SetMbr1(v string) *NodeEmbed { t.Mbr1 = v; return t }

// SetMbr2 sets the [NodeEmbed.Mbr2]
func (t *NodeEmbed) SetMbr2(v int) *NodeEmbed { t.Mbr2 = v; return t }
