// Code generated by "core generate"; DO NOT EDIT.

package plotcore

import (
	"cogentcore.org/core/enums"
)

var _PlotTypesValues = []PlotTypes{0, 1}

// PlotTypesN is the highest valid value for type PlotTypes, plus one.
const PlotTypesN PlotTypes = 2

var _PlotTypesValueMap = map[string]PlotTypes{`XY`: 0, `Bar`: 1}

var _PlotTypesDescMap = map[PlotTypes]string{0: `XY is a standard line / point plot`, 1: `Bar plots vertical bars`}

var _PlotTypesMap = map[PlotTypes]string{0: `XY`, 1: `Bar`}

// String returns the string representation of this PlotTypes value.
func (i PlotTypes) String() string { return enums.String(i, _PlotTypesMap) }

// SetString sets the PlotTypes value from its string representation,
// and returns an error if the string is invalid.
func (i *PlotTypes) SetString(s string) error {
	return enums.SetString(i, s, _PlotTypesValueMap, "PlotTypes")
}

// Int64 returns the PlotTypes value as an int64.
func (i PlotTypes) Int64() int64 { return int64(i) }

// SetInt64 sets the PlotTypes value from an int64.
func (i *PlotTypes) SetInt64(in int64) { *i = PlotTypes(in) }

// Desc returns the description of the PlotTypes value.
func (i PlotTypes) Desc() string { return enums.Desc(i, _PlotTypesDescMap) }

// PlotTypesValues returns all possible values for the type PlotTypes.
func PlotTypesValues() []PlotTypes { return _PlotTypesValues }

// Values returns all possible values for the type PlotTypes.
func (i PlotTypes) Values() []enums.Enum { return enums.Values(_PlotTypesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i PlotTypes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *PlotTypes) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "PlotTypes")
}
