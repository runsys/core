// Code generated by 'yaegi extract cogentcore.org/core/base/fileinfo'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/base/fileinfo"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/base/fileinfo/fileinfo"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Aac":                 reflect.ValueOf(fileinfo.Aac),
		"Ada":                 reflect.ValueOf(fileinfo.Ada),
		"Any":                 reflect.ValueOf(fileinfo.Any),
		"AnyArchive":          reflect.ValueOf(fileinfo.AnyArchive),
		"AnyAudio":            reflect.ValueOf(fileinfo.AnyAudio),
		"AnyBackup":           reflect.ValueOf(fileinfo.AnyBackup),
		"AnyBin":              reflect.ValueOf(fileinfo.AnyBin),
		"AnyCode":             reflect.ValueOf(fileinfo.AnyCode),
		"AnyData":             reflect.ValueOf(fileinfo.AnyData),
		"AnyDoc":              reflect.ValueOf(fileinfo.AnyDoc),
		"AnyExe":              reflect.ValueOf(fileinfo.AnyExe),
		"AnyFolder":           reflect.ValueOf(fileinfo.AnyFolder),
		"AnyFont":             reflect.ValueOf(fileinfo.AnyFont),
		"AnyImage":            reflect.ValueOf(fileinfo.AnyImage),
		"AnyKnown":            reflect.ValueOf(fileinfo.AnyKnown),
		"AnyModel":            reflect.ValueOf(fileinfo.AnyModel),
		"AnySheet":            reflect.ValueOf(fileinfo.AnySheet),
		"AnyText":             reflect.ValueOf(fileinfo.AnyText),
		"AnyVideo":            reflect.ValueOf(fileinfo.AnyVideo),
		"Archive":             reflect.ValueOf(fileinfo.Archive),
		"Audio":               reflect.ValueOf(fileinfo.Audio),
		"AvailableMimes":      reflect.ValueOf(&fileinfo.AvailableMimes).Elem(),
		"Avi":                 reflect.ValueOf(fileinfo.Avi),
		"BZip":                reflect.ValueOf(fileinfo.BZip),
		"Backup":              reflect.ValueOf(fileinfo.Backup),
		"Bash":                reflect.ValueOf(fileinfo.Bash),
		"BibTeX":              reflect.ValueOf(fileinfo.BibTeX),
		"Bin":                 reflect.ValueOf(fileinfo.Bin),
		"Bmp":                 reflect.ValueOf(fileinfo.Bmp),
		"C":                   reflect.ValueOf(fileinfo.C),
		"CSharp":              reflect.ValueOf(fileinfo.CSharp),
		"CategoriesN":         reflect.ValueOf(fileinfo.CategoriesN),
		"CategoriesValues":    reflect.ValueOf(fileinfo.CategoriesValues),
		"CategoryFromMime":    reflect.ValueOf(fileinfo.CategoryFromMime),
		"Code":                reflect.ValueOf(fileinfo.Code),
		"Color":               reflect.ValueOf(fileinfo.Color),
		"CopyFile":            reflect.ValueOf(fileinfo.CopyFile),
		"Cosh":                reflect.ValueOf(fileinfo.Cosh),
		"Csh":                 reflect.ValueOf(fileinfo.Csh),
		"Css":                 reflect.ValueOf(fileinfo.Css),
		"Csv":                 reflect.ValueOf(fileinfo.Csv),
		"CustomMimes":         reflect.ValueOf(&fileinfo.CustomMimes).Elem(),
		"D":                   reflect.ValueOf(fileinfo.D),
		"Data":                reflect.ValueOf(fileinfo.Data),
		"DataCsv":             reflect.ValueOf(constant.MakeFromLiteral("\"text/csv\"", token.STRING, 0)),
		"DataJson":            reflect.ValueOf(constant.MakeFromLiteral("\"application/json\"", token.STRING, 0)),
		"DataXml":             reflect.ValueOf(constant.MakeFromLiteral("\"application/xml\"", token.STRING, 0)),
		"Diff":                reflect.ValueOf(fileinfo.Diff),
		"Dmg":                 reflect.ValueOf(fileinfo.Dmg),
		"Doc":                 reflect.ValueOf(fileinfo.Doc),
		"EBook":               reflect.ValueOf(fileinfo.EBook),
		"EPub":                reflect.ValueOf(fileinfo.EPub),
		"Eiffel":              reflect.ValueOf(fileinfo.Eiffel),
		"Erlang":              reflect.ValueOf(fileinfo.Erlang),
		"Exe":                 reflect.ValueOf(fileinfo.Exe),
		"ExtKnown":            reflect.ValueOf(fileinfo.ExtKnown),
		"ExtMimeMap":          reflect.ValueOf(&fileinfo.ExtMimeMap).Elem(),
		"FSharp":              reflect.ValueOf(fileinfo.FSharp),
		"Filenames":           reflect.ValueOf(fileinfo.Filenames),
		"Flac":                reflect.ValueOf(fileinfo.Flac),
		"Folder":              reflect.ValueOf(fileinfo.Folder),
		"Font":                reflect.ValueOf(fileinfo.Font),
		"Forth":               reflect.ValueOf(fileinfo.Forth),
		"Fortran":             reflect.ValueOf(fileinfo.Fortran),
		"GZip":                reflect.ValueOf(fileinfo.GZip),
		"Gif":                 reflect.ValueOf(fileinfo.Gif),
		"Gimp":                reflect.ValueOf(fileinfo.Gimp),
		"Go":                  reflect.ValueOf(fileinfo.Go),
		"GraphVis":            reflect.ValueOf(fileinfo.GraphVis),
		"Haskell":             reflect.ValueOf(fileinfo.Haskell),
		"Heic":                reflect.ValueOf(fileinfo.Heic),
		"Heif":                reflect.ValueOf(fileinfo.Heif),
		"Html":                reflect.ValueOf(fileinfo.Html),
		"ICal":                reflect.ValueOf(fileinfo.ICal),
		"Icons":               reflect.ValueOf(&fileinfo.Icons).Elem(),
		"Image":               reflect.ValueOf(fileinfo.Image),
		"Ini":                 reflect.ValueOf(fileinfo.Ini),
		"IsMatch":             reflect.ValueOf(fileinfo.IsMatch),
		"IsMatchList":         reflect.ValueOf(fileinfo.IsMatchList),
		"Java":                reflect.ValueOf(fileinfo.Java),
		"JavaScript":          reflect.ValueOf(fileinfo.JavaScript),
		"Jpeg":                reflect.ValueOf(fileinfo.Jpeg),
		"Json":                reflect.ValueOf(fileinfo.Json),
		"KnownByName":         reflect.ValueOf(fileinfo.KnownByName),
		"KnownFromFile":       reflect.ValueOf(fileinfo.KnownFromFile),
		"KnownMimes":          reflect.ValueOf(&fileinfo.KnownMimes).Elem(),
		"KnownN":              reflect.ValueOf(fileinfo.KnownN),
		"KnownValues":         reflect.ValueOf(fileinfo.KnownValues),
		"Lisp":                reflect.ValueOf(fileinfo.Lisp),
		"Lua":                 reflect.ValueOf(fileinfo.Lua),
		"MSExcel":             reflect.ValueOf(fileinfo.MSExcel),
		"MSPowerpoint":        reflect.ValueOf(fileinfo.MSPowerpoint),
		"MSWord":              reflect.ValueOf(fileinfo.MSWord),
		"Makefile":            reflect.ValueOf(fileinfo.Makefile),
		"Markdown":            reflect.ValueOf(fileinfo.Markdown),
		"Mathematica":         reflect.ValueOf(fileinfo.Mathematica),
		"Matlab":              reflect.ValueOf(fileinfo.Matlab),
		"MergeAvailableMimes": reflect.ValueOf(fileinfo.MergeAvailableMimes),
		"Midi":                reflect.ValueOf(fileinfo.Midi),
		"MimeFromFile":        reflect.ValueOf(fileinfo.MimeFromFile),
		"MimeFromKnown":       reflect.ValueOf(fileinfo.MimeFromKnown),
		"MimeKnown":           reflect.ValueOf(fileinfo.MimeKnown),
		"MimeNoChar":          reflect.ValueOf(fileinfo.MimeNoChar),
		"MimeString":          reflect.ValueOf(fileinfo.MimeString),
		"MimeSub":             reflect.ValueOf(fileinfo.MimeSub),
		"MimeTop":             reflect.ValueOf(fileinfo.MimeTop),
		"Model":               reflect.ValueOf(fileinfo.Model),
		"Mov":                 reflect.ValueOf(fileinfo.Mov),
		"Mp3":                 reflect.ValueOf(fileinfo.Mp3),
		"Mp4":                 reflect.ValueOf(fileinfo.Mp4),
		"Mpeg":                reflect.ValueOf(fileinfo.Mpeg),
		"Multipart":           reflect.ValueOf(fileinfo.Multipart),
		"NewFileInfo":         reflect.ValueOf(fileinfo.NewFileInfo),
		"NewFileInfoType":     reflect.ValueOf(fileinfo.NewFileInfoType),
		"OCaml":               reflect.ValueOf(fileinfo.OCaml),
		"Obj":                 reflect.ValueOf(fileinfo.Obj),
		"ObjC":                reflect.ValueOf(fileinfo.ObjC),
		"Ogg":                 reflect.ValueOf(fileinfo.Ogg),
		"Ogv":                 reflect.ValueOf(fileinfo.Ogv),
		"OpenPres":            reflect.ValueOf(fileinfo.OpenPres),
		"OpenSheet":           reflect.ValueOf(fileinfo.OpenSheet),
		"OpenText":            reflect.ValueOf(fileinfo.OpenText),
		"Pascal":              reflect.ValueOf(fileinfo.Pascal),
		"Pbm":                 reflect.ValueOf(fileinfo.Pbm),
		"Pdf":                 reflect.ValueOf(fileinfo.Pdf),
		"Perl":                reflect.ValueOf(fileinfo.Perl),
		"Pgm":                 reflect.ValueOf(fileinfo.Pgm),
		"Php":                 reflect.ValueOf(fileinfo.Php),
		"PlainText":           reflect.ValueOf(fileinfo.PlainText),
		"Png":                 reflect.ValueOf(fileinfo.Png),
		"Pnm":                 reflect.ValueOf(fileinfo.Pnm),
		"Postscript":          reflect.ValueOf(fileinfo.Postscript),
		"Ppm":                 reflect.ValueOf(fileinfo.Ppm),
		"Prolog":              reflect.ValueOf(fileinfo.Prolog),
		"Protobuf":            reflect.ValueOf(fileinfo.Protobuf),
		"Python":              reflect.ValueOf(fileinfo.Python),
		"R":                   reflect.ValueOf(fileinfo.R),
		"Rtf":                 reflect.ValueOf(fileinfo.Rtf),
		"Ruby":                reflect.ValueOf(fileinfo.Ruby),
		"Rust":                reflect.ValueOf(fileinfo.Rust),
		"Scala":               reflect.ValueOf(fileinfo.Scala),
		"SevenZ":              reflect.ValueOf(fileinfo.SevenZ),
		"Shar":                reflect.ValueOf(fileinfo.Shar),
		"Sheet":               reflect.ValueOf(fileinfo.Sheet),
		"StandardMimes":       reflect.ValueOf(&fileinfo.StandardMimes).Elem(),
		"Svg":                 reflect.ValueOf(fileinfo.Svg),
		"Tar":                 reflect.ValueOf(fileinfo.Tar),
		"Tcl":                 reflect.ValueOf(fileinfo.Tcl),
		"TeX":                 reflect.ValueOf(fileinfo.TeX),
		"Texinfo":             reflect.ValueOf(fileinfo.Texinfo),
		"Text":                reflect.ValueOf(fileinfo.Text),
		"TextPlain":           reflect.ValueOf(constant.MakeFromLiteral("\"text/plain\"", token.STRING, 0)),
		"Tiff":                reflect.ValueOf(fileinfo.Tiff),
		"Toml":                reflect.ValueOf(fileinfo.Toml),
		"Trash":               reflect.ValueOf(fileinfo.Trash),
		"Troff":               reflect.ValueOf(fileinfo.Troff),
		"TrueType":            reflect.ValueOf(fileinfo.TrueType),
		"Tsv":                 reflect.ValueOf(fileinfo.Tsv),
		"Unknown":             reflect.ValueOf(fileinfo.Unknown),
		"UnknownCategory":     reflect.ValueOf(fileinfo.UnknownCategory),
		"Uri":                 reflect.ValueOf(fileinfo.Uri),
		"VCal":                reflect.ValueOf(fileinfo.VCal),
		"VCard":               reflect.ValueOf(fileinfo.VCard),
		"Video":               reflect.ValueOf(fileinfo.Video),
		"Vrml":                reflect.ValueOf(fileinfo.Vrml),
		"Wav":                 reflect.ValueOf(fileinfo.Wav),
		"WebOpenFont":         reflect.ValueOf(fileinfo.WebOpenFont),
		"Wmv":                 reflect.ValueOf(fileinfo.Wmv),
		"X3d":                 reflect.ValueOf(fileinfo.X3d),
		"Xbm":                 reflect.ValueOf(fileinfo.Xbm),
		"Xml":                 reflect.ValueOf(fileinfo.Xml),
		"Xpm":                 reflect.ValueOf(fileinfo.Xpm),
		"Xz":                  reflect.ValueOf(fileinfo.Xz),
		"Yaml":                reflect.ValueOf(fileinfo.Yaml),
		"Zip":                 reflect.ValueOf(fileinfo.Zip),

		// type definitions
		"Categories": reflect.ValueOf((*fileinfo.Categories)(nil)),
		"FileInfo":   reflect.ValueOf((*fileinfo.FileInfo)(nil)),
		"Known":      reflect.ValueOf((*fileinfo.Known)(nil)),
		"MimeType":   reflect.ValueOf((*fileinfo.MimeType)(nil)),
	}
}
