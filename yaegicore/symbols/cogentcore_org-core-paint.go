// Code generated by 'yaegi extract cogentcore.org/core/paint'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/paint"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/paint/paint"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ClampBorderRadius":    reflect.ValueOf(paint.ClampBorderRadius),
		"EdgeBlurFactors":      reflect.ValueOf(paint.EdgeBlurFactors),
		"FindEllipseCenter":    reflect.ValueOf(paint.FindEllipseCenter),
		"FontAlts":             reflect.ValueOf(paint.FontAlts),
		"FontExts":             reflect.ValueOf(&paint.FontExts).Elem(),
		"FontFaceName":         reflect.ValueOf(paint.FontFaceName),
		"FontFallbacks":        reflect.ValueOf(&paint.FontFallbacks).Elem(),
		"FontInfoExample":      reflect.ValueOf(&paint.FontInfoExample).Elem(),
		"FontLibrary":          reflect.ValueOf(&paint.FontLibrary).Elem(),
		"FontPaths":            reflect.ValueOf(&paint.FontPaths).Elem(),
		"FontSerifMonoGuess":   reflect.ValueOf(paint.FontSerifMonoGuess),
		"FontStyleCSS":         reflect.ValueOf(paint.FontStyleCSS),
		"GaussianBlur":         reflect.ValueOf(paint.GaussianBlur),
		"GaussianBlurKernel1D": reflect.ValueOf(paint.GaussianBlurKernel1D),
		"MaxDx":                reflect.ValueOf(paint.MaxDx),
		"NewContext":           reflect.ValueOf(paint.NewContext),
		"NewContextFromImage":  reflect.ValueOf(paint.NewContextFromImage),
		"NewContextFromRGBA":   reflect.ValueOf(paint.NewContextFromRGBA),
		"NextRuneAt":           reflect.ValueOf(paint.NextRuneAt),
		"OpenFont":             reflect.ValueOf(paint.OpenFont),
		"OpenFontFace":         reflect.ValueOf(paint.OpenFontFace),
		"SetHTMLSimpleTag":     reflect.ValueOf(paint.SetHTMLSimpleTag),
		"TextFontRenderMu":     reflect.ValueOf(&paint.TextFontRenderMu).Elem(),
		"TextWrapSizeEstimate": reflect.ValueOf(paint.TextWrapSizeEstimate),

		// type definitions
		"Context":  reflect.ValueOf((*paint.Context)(nil)),
		"FontInfo": reflect.ValueOf((*paint.FontInfo)(nil)),
		"FontLib":  reflect.ValueOf((*paint.FontLib)(nil)),
		"Rune":     reflect.ValueOf((*paint.Rune)(nil)),
		"Span":     reflect.ValueOf((*paint.Span)(nil)),
		"State":    reflect.ValueOf((*paint.State)(nil)),
		"Text":     reflect.ValueOf((*paint.Text)(nil)),
		"TextLink": reflect.ValueOf((*paint.TextLink)(nil)),
	}
}
