// Code generated by "core generate"; DO NOT EDIT.

package main

import (
	"fmt"
	"image"
	"image/draw"
	"maps"
	"strconv"
	"strings"
	"time"

	"cogentcore.org/core/base/errors"
	"cogentcore.org/core/base/fsx"
	"cogentcore.org/core/colors"
	"cogentcore.org/core/colors/gradient"
	"cogentcore.org/core/core"
	"cogentcore.org/core/events"
	"cogentcore.org/core/filetree"
	"cogentcore.org/core/htmlcore"
	"cogentcore.org/core/icons"
	"cogentcore.org/core/keymap"
	"cogentcore.org/core/math32"
	"cogentcore.org/core/pages"
	"cogentcore.org/core/paint"
	"cogentcore.org/core/plot/plotcore"
	"cogentcore.org/core/styles"
	"cogentcore.org/core/styles/units"
	"cogentcore.org/core/tensor/table"
	"cogentcore.org/core/texteditor"
	"cogentcore.org/core/tree"
)

func init() {
	maps.Copy(pages.Examples, PagesExamples)
}

// PagesExamples are the compiled pages examples for this app.
var PagesExamples = map[string]func(parent core.Widget){
	"getting-started/hello-world-0": func(parent core.Widget) {
		b := parent
		core.NewButton(b).SetText("Hello, World!")
	},
	"basics/widgets-0": func(parent core.Widget) {
		core.NewButton(parent).SetText("Click me!").SetIcon(icons.Add)
	},
	"basics/events-0": func(parent core.Widget) {
		core.NewButton(parent).SetText("Click me!").OnClick(func(e events.Event) {
			core.MessageSnackbar(parent, "Button clicked")
		})
	},
	"basics/events-1": func(parent core.Widget) {
		core.NewButton(parent).SetText("Click me!").OnClick(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprint("Button clicked at ", e.Pos()))
		})
	},
	"basics/styling-0": func(parent core.Widget) {
		core.NewText(parent).SetText("Bold text").Styler(func(s *styles.Style) {
			s.Font.Weight = styles.WeightBold
		})
	},
	"basics/styling-1": func(parent core.Widget) {
		core.NewButton(parent).SetText("Success button").Styler(func(s *styles.Style) {
			s.Background = colors.Scheme.Success.Base
			s.Color = colors.Scheme.Success.On
		})
	},
	"basics/styling-2": func(parent core.Widget) {
		core.NewFrame(parent).Styler(func(s *styles.Style) {
			s.Min.Set(units.Dp(50))
			s.Background = colors.Scheme.Primary.Base
		})
	},
	"basics/updating-0": func(parent core.Widget) {
		count := 0
		text := core.NewText(parent).SetText("0")
		core.NewButton(parent).SetText("Increment").OnClick(func(e events.Event) {
			count++
			text.SetText(strconv.Itoa(count)).Update()
		})
	},
	"basics/updating-1": func(parent core.Widget) {
		count := 0
		text := core.NewText(parent)
		text.Updater(func() {
			text.SetText(strconv.Itoa(count))
		})
		core.NewButton(parent).SetText("Increment").OnClick(func(e events.Event) {
			count++
			text.Update()
		})
	},
	"basics/value-binding-0": func(parent core.Widget) {
		count := 0
		text := core.Bind(&count, core.NewText(parent))
		core.NewButton(parent).SetText("Increment").OnClick(func(e events.Event) {
			count++
			text.Update()
		})
	},
	"basics/value-binding-1": func(parent core.Widget) {
		on := true
		core.Bind(&on, core.NewSwitch(parent)).OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, "The switch is now "+strconv.FormatBool(on))
		})
	},
	"basics/plans-0": func(parent core.Widget) {
		number := 3
		spinner := core.Bind(&number, core.NewSpinner(parent)).SetMin(0)
		buttons := core.NewFrame(parent)
		buttons.Maker(func(p *tree.Plan) {
			for i := range number {
				tree.AddAt(p, strconv.Itoa(i), func(w *core.Button) {
					w.SetText(strconv.Itoa(i))
				})
			}
		})
		spinner.OnChange(func(e events.Event) {
			buttons.Update()
		})
	},
	"basics/async-0": func(parent core.Widget) {
		text := core.NewText(parent)
		text.Updater(func() {
			text.SetText(time.Now().Format("15:04:05"))
		})
		go func() {
			ticker := time.NewTicker(time.Second)
			for range ticker.C {
				text.AsyncLock()
				text.Update()
				text.AsyncUnlock()
			}
		}()
	},
	"tutorials/todo-list-0": func(parent core.Widget) {
		type item struct {
			Done bool
			Task string
		}
		items := []item{{Task: "Code"}, {Task: "Eat"}}
		core.NewTable(parent).SetSlice(&items)
	},
	"tutorials/todo-list-1": func(parent core.Widget) {
		type item struct {
			Done bool
			Task string
		}
		items := []item{{Task: "Code"}, {Task: "Eat"}}
		var table *core.Table
		core.NewButton(parent).SetText("Add").SetIcon(icons.Add).OnClick(func(e events.Event) {
			table.SliceNewAt(0)
		})
		table = core.NewTable(parent).SetSlice(&items)
	},
	"tutorials/tic-tac-toe-0": func(parent core.Widget) {
		grid := core.NewFrame(parent)
		grid.Styler(func(s *styles.Style) {
			s.Display = styles.Grid
			s.Columns = 3
			s.Gap.Zero()
		})
		for range 9 {
			bt := core.NewButton(grid).SetType(core.ButtonAction)
			bt.Styler(func(s *styles.Style) {
				s.Border.Width.Set(units.Dp(1))
				s.Border.Color.Set(colors.Scheme.Outline)
				s.Border.Radius.Zero()
				s.Min.Set(units.Em(2))
				s.CenterAll()
			})
		}
	},
	"tutorials/tic-tac-toe-1": func(parent core.Widget) {
		current := "X"
		squares := [9]string{}
		grid := core.NewFrame(parent)
		grid.Styler(func(s *styles.Style) {
			s.Display = styles.Grid
			s.Columns = 3
			s.Gap.Zero()
		})
		for i := range 9 {
			bt := core.NewButton(grid).SetType(core.ButtonAction)
			bt.Styler(func(s *styles.Style) {
				s.Border.Width.Set(units.Dp(1))
				s.Border.Color.Set(colors.Scheme.Outline)
				s.Border.Radius.Zero()
				s.Min.Set(units.Em(2))
				s.CenterAll()
			})
			bt.OnClick(func(e events.Event) {
				// don't set squares that already have a value
				if squares[i] != "" {
					return
				}
				squares[i] = current
				if current == "X" {
					current = "O"
				} else {
					current = "X"
				}
				bt.Update()
			})
			bt.Updater(func() {
				bt.SetText(squares[i])
			})
		}
		core.NewButton(parent).SetText("Reset").OnClick(func(e events.Event) {
			squares = [9]string{}
			current = "X"
			grid.Update()
		})
	},
	"tutorials/tic-tac-toe-2": func(parent core.Widget) {
		current := "X"
		squares := [9]string{}
		status := core.NewText(parent)
		status.Updater(func() {
			sets := [][3]int{ // possible sets of three that result in a win
				{0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {0, 3, 6}, {1, 4, 7}, {2, 5, 8}, {0, 4, 8}, {2, 4, 6},
			}
			// check if someone has won
			for _, set := range sets {
				if squares[set[0]] != "" && squares[set[0]] == squares[set[1]] && squares[set[0]] == squares[set[2]] {
					status.SetText(squares[set[0]] + " wins!")
					current = ""
					return
				}
			}
			status.SetText("Next player: " + current)
		})
		grid := core.NewFrame(parent)
		grid.Styler(func(s *styles.Style) {
			s.Display = styles.Grid
			s.Columns = 3
			s.Gap.Zero()
		})
		for i := range 9 {
			bt := core.NewButton(grid).SetType(core.ButtonAction)
			bt.Styler(func(s *styles.Style) {
				s.Border.Width.Set(units.Dp(1))
				s.Border.Color.Set(colors.Scheme.Outline)
				s.Border.Radius.Zero()
				s.Min.Set(units.Em(2))
				s.CenterAll()
			})
			bt.OnClick(func(e events.Event) {
				// don't set squares if they already have a value or the game is over
				if squares[i] != "" || current == "" {
					return
				}
				squares[i] = current
				if current == "X" {
					current = "O"
				} else {
					current = "X"
				}
				bt.Update()
				status.Update()
			})
			bt.Updater(func() {
				bt.SetText(squares[i])
			})
		}
		core.NewButton(parent).SetText("Reset").OnClick(func(e events.Event) {
			squares = [9]string{}
			current = "X"
			grid.Update()
			status.Update()
		})
	},
	"widgets/basic/buttons-0": func(parent core.Widget) {
		core.NewButton(parent).SetText("Download")
	},
	"widgets/basic/buttons-1": func(parent core.Widget) {
		core.NewButton(parent).SetIcon(icons.Download)
	},
	"widgets/basic/buttons-2": func(parent core.Widget) {
		core.NewButton(parent).SetText("Download").SetIcon(icons.Download)
	},
	"widgets/basic/buttons-3": func(parent core.Widget) {
		core.NewButton(parent).SetText("Send").SetIcon(icons.Send).OnClick(func(e events.Event) {
			core.MessageSnackbar(parent, "Message sent")
		})
	},
	"widgets/basic/buttons-4": func(parent core.Widget) {
		core.NewButton(parent).SetText("Share").SetIcon(icons.Share).SetMenu(func(m *core.Scene) {
			core.NewButton(m).SetText("Copy link")
			core.NewButton(m).SetText("Send message")
		})
	},
	"widgets/basic/buttons-5": func(parent core.Widget) {
		core.NewButton(parent).SetText("Save").SetShortcut("Command+S").OnClick(func(e events.Event) {
			core.MessageSnackbar(parent, "File saved")
		})
	},
	"widgets/basic/buttons-6": func(parent core.Widget) {
		core.NewButton(parent).SetText("Open").SetKey(keymap.Open).OnClick(func(e events.Event) {
			core.MessageSnackbar(parent, "File opened")
		})
	},
	"widgets/basic/buttons-7": func(parent core.Widget) {
		core.NewButton(parent).SetType(core.ButtonFilled).SetText("Filled")
	},
	"widgets/basic/buttons-8": func(parent core.Widget) {
		core.NewButton(parent).SetType(core.ButtonTonal).SetText("Tonal")
	},
	"widgets/basic/buttons-9": func(parent core.Widget) {
		core.NewButton(parent).SetType(core.ButtonElevated).SetText("Elevated")
	},
	"widgets/basic/buttons-10": func(parent core.Widget) {
		core.NewButton(parent).SetType(core.ButtonOutlined).SetText("Outlined")
	},
	"widgets/basic/buttons-11": func(parent core.Widget) {
		core.NewButton(parent).SetType(core.ButtonText).SetText("Text")
	},
	"widgets/basic/buttons-12": func(parent core.Widget) {
		core.NewButton(parent).SetType(core.ButtonAction).SetText("Action")
	},
	"widgets/basic/frames-0": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-1": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Direction = styles.Column
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-2": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Gap.Set(units.Em(2))
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-3": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Max.X.Em(10)
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-4": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Overflow.X = styles.OverflowAuto
			s.Max.X.Em(10)
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-5": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Wrap = true
			s.Max.X.Em(10)
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-6": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Display = styles.Grid
			s.Columns = 2
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
		core.NewButton(fr).SetText("Fourth")
	},
	"widgets/basic/frames-7": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Background = colors.Scheme.Warn.Container
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-8": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Background = gradient.NewLinear().AddStop(colors.Yellow, 0).AddStop(colors.Orange, 0.5).AddStop(colors.Red, 1)
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-9": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Border.Width.Set(units.Dp(4))
			s.Border.Color.Set(colors.Scheme.Outline)
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-10": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Border.Radius = styles.BorderRadiusLarge
			s.Border.Width.Set(units.Dp(4))
			s.Border.Color.Set(colors.Scheme.Outline)
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-11": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Grow.Set(1, 1)
			s.Border.Width.Set(units.Dp(4))
			s.Border.Color.Set(colors.Scheme.Outline)
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-12": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.Styler(func(s *styles.Style) {
			s.Direction = styles.Column
		})
		core.NewButton(fr).SetText("First")
		core.NewSeparator(fr)
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-13": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		core.NewButton(fr).SetText("First")
		sp := core.NewSeparator(fr)
		sp.Styler(func(s *styles.Style) {
			s.Direction = styles.Column
		})
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/frames-14": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewStretch(fr)
		core.NewButton(fr).SetText("Third")
	},
	"widgets/basic/icons-0": func(parent core.Widget) {
		core.NewButton(parent).SetIcon(icons.Send)
	},
	"widgets/basic/icons-1": func(parent core.Widget) {
		core.NewIcon(parent).SetIcon(icons.Home)
	},
	"widgets/basic/icons-2": func(parent core.Widget) {
		core.NewButton(parent).SetIcon(icons.Home.Fill())
	},
	"widgets/basic/text-0": func(parent core.Widget) {
		core.NewText(parent).SetText("Hello, world!")
	},
	"widgets/basic/text-1": func(parent core.Widget) {
		core.NewText(parent).SetText("This is a very long sentence that demonstrates how text content will overflow onto multiple lines when the size of the text exceeds the size of its surrounding container; text widgets are customizable widget that Cogent Core provides, allowing you to display many kinds of text")
	},
	"widgets/basic/text-2": func(parent core.Widget) {
		core.NewText(parent).SetText(`<b>You</b> can use <i>HTML</i> <u>formatting</u> inside of <b><i><u>Cogent Core</u></i></b> text, including <span style="color:red;background-color:yellow">custom styling</span> and <a href="https://example.com">links</a>`)
	},
	"widgets/basic/text-3": func(parent core.Widget) {
		core.NewText(parent).SetType(core.TextHeadlineMedium).SetText("Hello, world!")
	},
	"widgets/basic/text-4": func(parent core.Widget) {
		core.NewText(parent).SetText("Hello,\n\tworld!").Styler(func(s *styles.Style) {
			s.Font.Size.Dp(21)
			s.Font.Style = styles.Italic
			s.Text.WhiteSpace = styles.WhiteSpacePre
			s.Color = colors.Scheme.Success.Base
			s.SetMono(true)
		})
	},
	"widgets/basic/tooltips-0": func(parent core.Widget) {
		core.NewButton(parent).SetIcon(icons.Add).SetTooltip("Add a new item to the list")
	},
	"widgets/basic/tooltips-1": func(parent core.Widget) {
		core.NewSlider(parent)
	},
	"widgets/inputs/text-fields-0": func(parent core.Widget) {
		core.NewTextField(parent)
	},
	"widgets/inputs/text-fields-1": func(parent core.Widget) {
		core.NewText(parent).SetText("Name:")
		core.NewTextField(parent).SetPlaceholder("Jane Doe")
	},
	"widgets/inputs/text-fields-2": func(parent core.Widget) {
		core.NewTextField(parent).SetText("Hello, world!")
	},
	"widgets/inputs/text-fields-3": func(parent core.Widget) {
		core.NewTextField(parent).SetText("This is a long sentence that demonstrates how text field content can overflow onto multiple lines")
	},
	"widgets/inputs/text-fields-4": func(parent core.Widget) {
		core.NewTextField(parent).SetType(core.TextFieldOutlined)
	},
	"widgets/inputs/text-fields-5": func(parent core.Widget) {
		core.NewTextField(parent).SetTypePassword()
	},
	"widgets/inputs/text-fields-6": func(parent core.Widget) {
		core.NewTextField(parent).AddClearButton()
	},
	"widgets/inputs/text-fields-7": func(parent core.Widget) {
		core.NewTextField(parent).SetLeadingIcon(icons.Euro).SetTrailingIcon(icons.OpenInNew, func(e events.Event) {
			core.MessageSnackbar(parent, "Opening shopping cart")
		})
	},
	"widgets/inputs/text-fields-8": func(parent core.Widget) {
		tf := core.NewTextField(parent)
		tf.SetValidator(func() error {
			if !strings.Contains(tf.Text(), "Go") {
				return errors.New("Must contain Go")
			}
			return nil
		})
	},
	"widgets/inputs/text-fields-9": func(parent core.Widget) {
		tf := core.NewTextField(parent)
		tf.OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, "OnChange: "+tf.Text())
		})
	},
	"widgets/inputs/text-fields-10": func(parent core.Widget) {
		tf := core.NewTextField(parent)
		tf.OnInput(func(e events.Event) {
			core.MessageSnackbar(parent, "OnInput: "+tf.Text())
		})
	},
	"widgets/inputs/choosers-0": func(parent core.Widget) {
		core.NewChooser(parent).SetStrings("macOS", "Windows", "Linux")
	},
	"widgets/inputs/choosers-1": func(parent core.Widget) {
		core.NewChooser(parent).SetItems(
			core.ChooserItem{Value: "Computer", Icon: icons.Computer, Tooltip: "Use a computer"},
			core.ChooserItem{Value: "Phone", Icon: icons.Smartphone, Tooltip: "Use a phone"},
		)
	},
	"widgets/inputs/choosers-2": func(parent core.Widget) {
		core.NewChooser(parent).SetPlaceholder("Choose a platform").SetStrings("macOS", "Windows", "Linux")
	},
	"widgets/inputs/choosers-3": func(parent core.Widget) {
		core.NewChooser(parent).SetStrings("Apple", "Orange", "Strawberry").SetCurrentValue("Orange")
	},
	"widgets/inputs/choosers-4": func(parent core.Widget) {
		core.NewChooser(parent).SetType(core.ChooserOutlined).SetStrings("Apple", "Orange", "Strawberry")
	},
	"widgets/inputs/choosers-5": func(parent core.Widget) {
		core.NewChooser(parent).SetIcon(icons.Sort).SetStrings("Newest", "Oldest", "Popular")
	},
	"widgets/inputs/choosers-6": func(parent core.Widget) {
		core.NewChooser(parent).SetEditable(true).SetStrings("Newest", "Oldest", "Popular")
	},
	"widgets/inputs/choosers-7": func(parent core.Widget) {
		core.NewChooser(parent).SetAllowNew(true).SetStrings("Newest", "Oldest", "Popular")
	},
	"widgets/inputs/choosers-8": func(parent core.Widget) {
		core.NewChooser(parent).SetEditable(true).SetAllowNew(true).SetStrings("Newest", "Oldest", "Popular")
	},
	"widgets/inputs/choosers-9": func(parent core.Widget) {
		ch := core.NewChooser(parent).SetStrings("Newest", "Oldest", "Popular")
		ch.OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprintf("Sorting by %v", ch.CurrentItem.Value))
		})
	},
	"widgets/inputs/sliders-0": func(parent core.Widget) {
		core.NewSlider(parent)
	},
	"widgets/inputs/sliders-1": func(parent core.Widget) {
		core.NewSlider(parent).SetValue(0.7)
	},
	"widgets/inputs/sliders-2": func(parent core.Widget) {
		core.NewSlider(parent).SetMin(5.7).SetMax(18).SetValue(10.2)
	},
	"widgets/inputs/sliders-3": func(parent core.Widget) {
		core.NewSlider(parent).SetStep(0.2)
	},
	"widgets/inputs/sliders-4": func(parent core.Widget) {
		core.NewSlider(parent).SetStep(0.2).SetEnforceStep(true)
	},
	"widgets/inputs/sliders-5": func(parent core.Widget) {
		core.NewSlider(parent).SetIcon(icons.DeployedCode.Fill())
	},
	"widgets/inputs/sliders-6": func(parent core.Widget) {
		sr := core.NewSlider(parent)
		sr.OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprintf("OnChange: %v", sr.Value))
		})
	},
	"widgets/inputs/sliders-7": func(parent core.Widget) {
		sr := core.NewSlider(parent)
		sr.OnInput(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprintf("OnInput: %v", sr.Value))
		})
	},
	"widgets/inputs/spinners-0": func(parent core.Widget) {
		core.NewSpinner(parent)
	},
	"widgets/inputs/spinners-1": func(parent core.Widget) {
		core.NewSpinner(parent).SetValue(12.7)
	},
	"widgets/inputs/spinners-2": func(parent core.Widget) {
		core.NewSpinner(parent).SetMin(-0.5).SetMax(2.7)
	},
	"widgets/inputs/spinners-3": func(parent core.Widget) {
		core.NewSpinner(parent).SetStep(6)
	},
	"widgets/inputs/spinners-4": func(parent core.Widget) {
		core.NewSpinner(parent).SetStep(4).SetEnforceStep(true)
	},
	"widgets/inputs/spinners-5": func(parent core.Widget) {
		core.NewSpinner(parent).SetType(core.TextFieldOutlined)
	},
	"widgets/inputs/spinners-6": func(parent core.Widget) {
		core.NewSpinner(parent).SetFormat("%X").SetStep(1).SetValue(44)
	},
	"widgets/inputs/spinners-7": func(parent core.Widget) {
		sp := core.NewSpinner(parent)
		sp.OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprintf("Value changed to %g", sp.Value))
		})
	},
	"widgets/inputs/switches-0": func(parent core.Widget) {
		core.NewSwitch(parent)
	},
	"widgets/inputs/switches-1": func(parent core.Widget) {
		core.NewSwitch(parent).SetText("Remember me")
	},
	"widgets/inputs/switches-2": func(parent core.Widget) {
		core.NewSwitch(parent).SetType(core.SwitchCheckbox).SetText("Remember me")
	},
	"widgets/inputs/switches-3": func(parent core.Widget) {
		core.NewSwitch(parent).SetType(core.SwitchRadioButton).SetText("Remember me")
	},
	"widgets/inputs/switches-4": func(parent core.Widget) {
		sw := core.NewSwitch(parent).SetText("Remember me")
		sw.OnChange(func(e events.Event) {
			core.MessageSnackbar(sw, fmt.Sprintf("Switch is %v", sw.IsChecked()))
		})
	},
	"widgets/inputs/switches-5": func(parent core.Widget) {
		core.NewSwitches(parent).SetStrings("Go", "Python", "C++")
	},
	"widgets/inputs/switches-6": func(parent core.Widget) {
		core.NewSwitches(parent).SetItems(
			core.SwitchItem{Value: "Go", Tooltip: "Elegant, fast, and easy-to-use"},
			core.SwitchItem{Value: "Python", Tooltip: "Slow and duck-typed"},
			core.SwitchItem{Value: "C++", Tooltip: "Hard to use and slow to compile"},
		)
	},
	"widgets/inputs/switches-7": func(parent core.Widget) {
		core.NewSwitches(parent).SetMutex(true).SetStrings("Go", "Python", "C++")
	},
	"widgets/inputs/switches-8": func(parent core.Widget) {
		core.NewSwitches(parent).SetType(core.SwitchChip).SetStrings("Go", "Python", "C++")
	},
	"widgets/inputs/switches-9": func(parent core.Widget) {
		core.NewSwitches(parent).SetType(core.SwitchCheckbox).SetStrings("Go", "Python", "C++")
	},
	"widgets/inputs/switches-10": func(parent core.Widget) {
		core.NewSwitches(parent).SetType(core.SwitchRadioButton).SetStrings("Go", "Python", "C++")
	},
	"widgets/inputs/switches-11": func(parent core.Widget) {
		core.NewSwitches(parent).SetType(core.SwitchSegmentedButton).SetStrings("Go", "Python", "C++")
	},
	"widgets/inputs/switches-12": func(parent core.Widget) {
		core.NewSwitches(parent).SetStrings("Go", "Python", "C++").Styler(func(s *styles.Style) {
			s.Direction = styles.Column
		})
	},
	"widgets/inputs/switches-13": func(parent core.Widget) {
		sw := core.NewSwitches(parent).SetStrings("Go", "Python", "C++")
		sw.OnChange(func(e events.Event) {
			core.MessageSnackbar(sw, fmt.Sprintf("Currently selected: %v", sw.SelectedItems()))
		})
	},
	"widgets/inputs/text-editors-0": func(parent core.Widget) {
		texteditor.NewSoloEditor(parent)
	},
	"widgets/inputs/text-editors-1": func(parent core.Widget) {
		texteditor.NewSoloEditor(parent).Buffer.SetTextString("Hello, world!")
	},
	"widgets/inputs/text-editors-2": func(parent core.Widget) {
		texteditor.NewSoloEditor(parent).Buffer.SetLang("go").SetTextString(`package main

func main() {
    fmt.Println("Hello, world!")
}
`)
	},
	"widgets/inputs/text-editors-3": func(parent core.Widget) {
		errors.Log(texteditor.NewSoloEditor(parent).Buffer.OpenFS(myFile, "file.go"))
	},
	"widgets/inputs/text-editors-4": func(parent core.Widget) {
		tb := texteditor.NewBuffer().SetTextString("Hello, world!")
		texteditor.NewEditor(parent).SetBuffer(tb)
		texteditor.NewEditor(parent).SetBuffer(tb)
	},
	"widgets/inputs/text-editors-5": func(parent core.Widget) {
		te := texteditor.NewSoloEditor(parent)
		te.OnInput(func(e events.Event) {
			core.MessageSnackbar(parent, "OnInput: "+te.Buffer.String())
		})
	},
	"widgets/containers/dialogs-0": func(parent core.Widget) {
		bt := core.NewButton(parent).SetText("Message")
		bt.OnClick(func(e events.Event) {
			core.MessageDialog(bt, "Something happened", "Message")
		})
	},
	"widgets/containers/dialogs-1": func(parent core.Widget) {
		bt := core.NewButton(parent).SetText("Error")
		bt.OnClick(func(e events.Event) {
			core.ErrorDialog(bt, errors.New("invalid encoding format"), "Error loading file")
		})
	},
	"widgets/containers/dialogs-2": func(parent core.Widget) {
		bt := core.NewButton(parent).SetText("Confirm")
		bt.OnClick(func(e events.Event) {
			d := core.NewBody().AddTitle("Confirm").AddText("Send message?")
			d.AddBottomBar(func(parent core.Widget) {
				d.AddCancel(parent).OnClick(func(e events.Event) {
					core.MessageSnackbar(bt, "Dialog canceled")
				})
				d.AddOK(parent).OnClick(func(e events.Event) {
					core.MessageSnackbar(bt, "Dialog accepted")
				})
			})
			d.RunDialog(bt)
		})
	},
	"widgets/containers/dialogs-3": func(parent core.Widget) {
		bt := core.NewButton(parent).SetText("Input")
		bt.OnClick(func(e events.Event) {
			d := core.NewBody().AddTitle("Input").AddText("What is your name?")
			tf := core.NewTextField(d)
			d.AddBottomBar(func(parent core.Widget) {
				d.AddCancel(parent)
				d.AddOK(parent).OnClick(func(e events.Event) {
					core.MessageSnackbar(bt, "Your name is "+tf.Text())
				})
			})
			d.RunDialog(bt)
		})
	},
	"widgets/containers/dialogs-4": func(parent core.Widget) {
		bt := core.NewButton(parent).SetText("Full window")
		bt.OnClick(func(e events.Event) {
			d := core.NewBody().AddTitle("Full window dialog")
			d.RunFullDialog(bt)
		})
	},
	"widgets/containers/dialogs-5": func(parent core.Widget) {
		bt := core.NewButton(parent).SetText("New window")
		bt.OnClick(func(e events.Event) {
			d := core.NewBody().AddTitle("New window dialog")
			d.RunWindowDialog(bt)
		})
	},
	"widgets/containers/snackbars-0": func(parent core.Widget) {
		bt := core.NewButton(parent).SetText("Message")
		bt.OnClick(func(e events.Event) {
			core.MessageSnackbar(bt, "New messages loaded")
		})
	},
	"widgets/containers/snackbars-1": func(parent core.Widget) {
		bt := core.NewButton(parent).SetText("Error")
		bt.OnClick(func(e events.Event) {
			core.ErrorSnackbar(bt, errors.New("file not found"), "Error loading page")
		})
	},
	"widgets/containers/snackbars-2": func(parent core.Widget) {
		bt := core.NewButton(parent).SetText("Custom")
		bt.OnClick(func(e events.Event) {
			core.NewBody().AddSnackbarText("Files updated").
				AddSnackbarButton("Refresh", func(e events.Event) {
					core.MessageSnackbar(bt, "Refreshed files")
				}).AddSnackbarIcon(icons.Close).NewSnackbar(bt).Run()
		})
	},
	"widgets/containers/splits-0": func(parent core.Widget) {
		sp := core.NewSplits(parent)
		core.NewText(sp).SetText("First")
		core.NewText(sp).SetText("Second")
	},
	"widgets/containers/splits-1": func(parent core.Widget) {
		sp := core.NewSplits(parent)
		core.NewText(sp).SetText("First")
		core.NewText(sp).SetText("Second")
		core.NewText(sp).SetText("Third")
		core.NewText(sp).SetText("Fourth")
	},
	"widgets/containers/splits-2": func(parent core.Widget) {
		sp := core.NewSplits(parent).SetSplits(0.2, 0.8)
		core.NewText(sp).SetText("First")
		core.NewText(sp).SetText("Second")
	},
	"widgets/containers/splits-3": func(parent core.Widget) {
		sp := core.NewSplits(parent)
		sp.Styler(func(s *styles.Style) {
			s.Direction = styles.Column
		})
		core.NewText(sp).SetText("First")
		core.NewText(sp).SetText("Second")
	},
	"widgets/containers/splits-4": func(parent core.Widget) {
		sp := core.NewSplits(parent)
		sp.Styler(func(s *styles.Style) {
			s.Direction = styles.Row
		})
		core.NewText(sp).SetText("First")
		core.NewText(sp).SetText("Second")
	},
	"widgets/containers/tabs-0": func(parent core.Widget) {
		ts := core.NewTabs(parent)
		ts.NewTab("First")
		ts.NewTab("Second")
	},
	"widgets/containers/tabs-1": func(parent core.Widget) {
		ts := core.NewTabs(parent)
		first := ts.NewTab("First")
		core.NewText(first).SetText("I am first!")
		second := ts.NewTab("Second")
		core.NewText(second).SetText("I am second!")
	},
	"widgets/containers/tabs-2": func(parent core.Widget) {
		ts := core.NewTabs(parent)
		ts.NewTab("First")
		ts.NewTab("Second")
		ts.NewTab("Third")
		ts.NewTab("Fourth")
	},
	"widgets/containers/tabs-3": func(parent core.Widget) {
		ts := core.NewTabs(parent)
		ts.NewTab("First", icons.Home)
		ts.NewTab("Second", icons.Explore)
	},
	"widgets/containers/tabs-4": func(parent core.Widget) {
		ts := core.NewTabs(parent).SetType(core.FunctionalTabs)
		ts.NewTab("First")
		ts.NewTab("Second")
		ts.NewTab("Third")
	},
	"widgets/containers/tabs-5": func(parent core.Widget) {
		ts := core.NewTabs(parent).SetType(core.NavigationAuto)
		ts.NewTab("First", icons.Home)
		ts.NewTab("Second", icons.Explore)
		ts.NewTab("Third", icons.History)
	},
	"widgets/containers/tabs-6": func(parent core.Widget) {
		ts := core.NewTabs(parent).SetNewTabButton(true)
		ts.NewTab("First")
		ts.NewTab("Second")
	},
	"widgets/containers/toolbars-0": func(parent core.Widget) {
		tb := core.NewToolbar(parent)
		tb.Maker(func(p *tree.Plan) {
			tree.Add(p, func(w *core.Button) {
				w.SetText("Build")
			})
			tree.Add(p, func(w *core.Button) {
				w.SetText("Run")
			})
		})
	},
	"widgets/containers/toolbars-1": func(parent core.Widget) {
		tb := core.NewToolbar(parent)
		tb.Maker(func(p *tree.Plan) {
			tree.Add(p, func(w *core.FuncButton) {
				w.SetFunc(core.AppearanceSettings.SaveScreenZoom)
			})
			tree.Add(p, func(w *core.Switch) {
				w.SetText("Active")
			})
		})
	},
	"widgets/containers/toolbars-2": func(parent core.Widget) {
		tb := core.NewToolbar(parent)
		tb.Maker(func(p *tree.Plan) {
			for i := range 30 {
				tree.AddAt(p, strconv.Itoa(i), func(w *core.Button) {
					w.SetText("Button " + strconv.Itoa(i))
				})
			}
		})
	},
	"widgets/collections/forms-0": func(parent core.Widget) {
		type person struct {
			Name string
			Age  int
		}
		core.NewForm(parent).SetStruct(&person{Name: "Go", Age: 35})
	},
	"widgets/collections/forms-1": func(parent core.Widget) {
		type person struct {
			Name string
			Age  int
		}
		core.NewForm(parent).SetInline(true).SetStruct(&person{Name: "Go", Age: 35})
	},
	"widgets/collections/forms-2": func(parent core.Widget) {
		type person struct {
			Name string
			Age  int
		}
		p := person{Name: "Go", Age: 35}
		core.NewForm(parent).SetStruct(&p).OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprintf("You are %v", p))
		})
	},
	"widgets/collections/forms-3": func(parent core.Widget) {
		type person struct {
			Name string `immediate:"+"`
			Age  int
		}
		p := person{Name: "Go", Age: 35}
		core.NewForm(parent).SetStruct(&p).OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprintf("You are %v", p))
		})
	},
	"widgets/collections/forms-4": func(parent core.Widget) {
		type person struct {
			Name string
			Age  int `display:"-"`
		}
		core.NewForm(parent).SetStruct(&person{Name: "Go", Age: 35})
	},
	"widgets/collections/forms-5": func(parent core.Widget) {
		type person struct {
			Name string `edit:"-"`
			Age  int
		}
		core.NewForm(parent).SetStruct(&person{Name: "Go", Age: 35})
	},
	"widgets/collections/forms-6": func(parent core.Widget) {
		type person struct {
			Name string
			Age  int
		}
		core.NewForm(parent).SetStruct(&person{Name: "Go", Age: 35}).SetReadOnly(true)
	},
	"widgets/collections/forms-7": func(parent core.Widget) {
		type Person struct {
			Name string
			Age  int
		}
		type employee struct {
			Person
			Role string
		}
		core.NewForm(parent).SetStruct(&employee{Person{Name: "Go", Age: 35}, "Programmer"})
	},
	"widgets/collections/forms-8": func(parent core.Widget) {
		type person struct {
			Name string
			Age  int
		}
		type employee struct {
			Role    string
			Manager person
		}
		core.NewForm(parent).SetStruct(&employee{"Programmer", person{Name: "Go", Age: 35}})
	},
	"widgets/collections/forms-9": func(parent core.Widget) {
		type person struct {
			Name string
			Age  int
		}
		type employee struct {
			Role    string
			Manager person `display:"add-fields"`
		}
		core.NewForm(parent).SetStruct(&employee{"Programmer", person{Name: "Go", Age: 35}})
	},
	"widgets/collections/forms-10": func(parent core.Widget) {
		type person struct {
			Name      string `default:"Gopher"`
			Age       int    `default:"20:30"`
			Precision int    `default:"64,32"`
		}
		core.NewForm(parent).SetStruct(&person{Name: "Go", Age: 35, Precision: 50})
	},
	"widgets/collections/forms-11": func(parent core.Widget) {
		type person struct {
			Name string
			Age  int
		}
		core.NewFormButton(parent).SetStruct(&person{Name: "Go", Age: 35})
	},
	"widgets/collections/keyed-lists-0": func(parent core.Widget) {
		core.NewKeyedList(parent).SetMap(&map[string]int{"Go": 1, "C++": 3, "Python": 5})
	},
	"widgets/collections/keyed-lists-1": func(parent core.Widget) {
		core.NewKeyedList(parent).SetInline(true).SetMap(&map[string]int{"Go": 1, "C++": 3})
	},
	"widgets/collections/keyed-lists-2": func(parent core.Widget) {
		m := map[string]int{"Go": 1, "C++": 3, "Python": 5}
		core.NewKeyedList(parent).SetMap(&m).OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprintf("Map: %v", m))
		})
	},
	"widgets/collections/keyed-lists-3": func(parent core.Widget) {
		core.NewKeyedList(parent).SetMap(&map[string]int{"Go": 1, "C++": 3, "Python": 5}).SetReadOnly(true)
	},
	"widgets/collections/keyed-lists-4": func(parent core.Widget) {
		core.NewKeyedList(parent).SetMap(&map[string]any{"Go": 1, "C++": "C-like", "Python": true})
	},
	"widgets/collections/keyed-lists-5": func(parent core.Widget) {
		core.NewKeyedListButton(parent).SetMap(&map[string]int{"Go": 1, "C++": 3, "Python": 5})
	},
	"widgets/collections/lists-0": func(parent core.Widget) {
		core.NewList(parent).SetSlice(&[]int{1, 3, 5})
	},
	"widgets/collections/lists-1": func(parent core.Widget) {
		core.NewInlineList(parent).SetSlice(&[]int{1, 3, 5})
	},
	"widgets/collections/lists-2": func(parent core.Widget) {
		sl := []int{1, 3, 5}
		core.NewList(parent).SetSlice(&sl).OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprintf("Slice: %v", sl))
		})
	},
	"widgets/collections/lists-3": func(parent core.Widget) {
		core.NewList(parent).SetSlice(&[]int{1, 3, 5}).SetReadOnly(true)
	},
	"widgets/collections/lists-4": func(parent core.Widget) {
		core.NewListButton(parent).SetSlice(&[]int{1, 3, 5})
	},
	"widgets/collections/tables-0": func(parent core.Widget) {
		type language struct {
			Name   string
			Rating int
		}
		core.NewTable(parent).SetSlice(&[]language{{"Go", 10}, {"Python", 5}})
	},
	"widgets/collections/tables-1": func(parent core.Widget) {
		type language struct {
			Name   string
			Rating int
		}
		sl := []language{{"Go", 10}, {"Python", 5}}
		core.NewTable(parent).SetSlice(&sl).OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, fmt.Sprintf("Languages: %v", sl))
		})
	},
	"widgets/collections/tables-2": func(parent core.Widget) {
		type language struct {
			Name   string
			Rating int `display:"-"`
		}
		core.NewTable(parent).SetSlice(&[]language{{"Go", 10}, {"Python", 5}})
	},
	"widgets/collections/tables-3": func(parent core.Widget) {
		type language struct {
			Name   string
			Rating int `display:"-" table:"+"`
		}
		core.NewTable(parent).SetSlice(&[]language{{"Go", 10}, {"Python", 5}})
	},
	"widgets/collections/tables-4": func(parent core.Widget) {
		type language struct {
			Name   string `edit:"-"`
			Rating int
		}
		core.NewTable(parent).SetSlice(&[]language{{"Go", 10}, {"Python", 5}})
	},
	"widgets/collections/tables-5": func(parent core.Widget) {
		type language struct {
			Name   string
			Rating int
		}
		core.NewTable(parent).SetSlice(&[]language{{"Go", 10}, {"Python", 5}}).SetReadOnly(true)
	},
	"widgets/collections/tables-6": func(parent core.Widget) {
		type language struct {
			Name   string
			Rating int
		}
		core.NewListButton(parent).SetSlice(&[]language{{"Go", 10}, {"Python", 5}})
	},
	"widgets/collections/trees-0": func(parent core.Widget) {
		tr := core.NewTree(parent).SetText("Root")
		core.NewTree(tr)
		c2 := core.NewTree(tr)
		core.NewTree(c2)
	},
	"widgets/collections/trees-1": func(parent core.Widget) {
		n := tree.NewNodeBase()
		tree.NewNodeBase(n)
		c2 := tree.NewNodeBase(n)
		tree.NewNodeBase(c2)
		core.NewTree(parent).SyncTree(n)
	},
	"widgets/collections/trees-2": func(parent core.Widget) {
		n := tree.NewNodeBase()
		tree.NewNodeBase(n)
		c2 := tree.NewNodeBase(n)
		tree.NewNodeBase(c2)
		core.NewTree(parent).SyncTree(n).OnChange(func(e events.Event) {
			core.MessageSnackbar(parent, "Tree changed")
		})
	},
	"widgets/collections/trees-3": func(parent core.Widget) {
		n := tree.NewNodeBase()
		tree.NewNodeBase(n)
		c2 := tree.NewNodeBase(n)
		tree.NewNodeBase(c2)
		core.NewTree(parent).SyncTree(n).SetReadOnly(true)
	},
	"widgets/collections/trees-4": func(parent core.Widget) {
		n := tree.NewNodeBase()
		tree.NewNodeBase(n)
		c2 := tree.NewNodeBase(n)
		tree.NewNodeBase(c2)
		core.NewTreeButton(parent).SetTree(n)
	},
	"widgets/pickers/color-pickers-0": func(parent core.Widget) {
		core.NewColorPicker(parent).SetColor(colors.Orange)
	},
	"widgets/pickers/color-pickers-1": func(parent core.Widget) {
		cp := core.NewColorPicker(parent).SetColor(colors.Green)
		cp.OnChange(func(e events.Event) {
			core.MessageSnackbar(cp, colors.AsHex(cp.Color))
		})
	},
	"widgets/pickers/color-pickers-2": func(parent core.Widget) {
		core.NewColorButton(parent).SetColor(colors.Purple)
	},
	"widgets/pickers/color-pickers-3": func(parent core.Widget) {
		cb := core.NewColorButton(parent).SetColor(colors.Gold)
		cb.OnChange(func(e events.Event) {
			core.MessageSnackbar(cb, colors.AsHex(cb.Color))
		})
	},
	"widgets/pickers/date-pickers-0": func(parent core.Widget) {
		core.NewDatePicker(parent).SetTime(time.Now())
	},
	"widgets/pickers/date-pickers-1": func(parent core.Widget) {
		dp := core.NewDatePicker(parent).SetTime(time.Now())
		dp.OnChange(func(e events.Event) {
			core.MessageSnackbar(dp, dp.Time.Format("1/2/2006"))
		})
	},
	"widgets/pickers/file-pickers-0": func(parent core.Widget) {
		core.NewFilePicker(parent)
	},
	"widgets/pickers/file-pickers-1": func(parent core.Widget) {
		core.NewFilePicker(parent).SetFilename(core.TheApp.DataDir())
	},
	"widgets/pickers/file-pickers-2": func(parent core.Widget) {
		fp := core.NewFilePicker(parent)
		fp.OnSelect(func(e events.Event) {
			core.MessageSnackbar(fp, fp.SelectedFile())
		})
	},
	"widgets/pickers/file-pickers-3": func(parent core.Widget) {
		core.NewFileButton(parent)
	},
	"widgets/pickers/file-pickers-4": func(parent core.Widget) {
		fb := core.NewFileButton(parent)
		fb.OnChange(func(e events.Event) {
			core.MessageSnackbar(fb, fb.Filename)
		})
	},
	"widgets/pickers/time-pickers-0": func(parent core.Widget) {
		core.NewTimePicker(parent).SetTime(time.Now())
	},
	"widgets/pickers/time-pickers-1": func(parent core.Widget) {
		tp := core.NewTimePicker(parent).SetTime(time.Now())
		tp.OnChange(func(e events.Event) {
			core.MessageSnackbar(tp, tp.Time.Format(core.SystemSettings.TimeFormat()))
		})
	},
	"widgets/pickers/time-pickers-2": func(parent core.Widget) {
		core.NewTimeInput(parent).SetTime(time.Now())
	},
	"widgets/pickers/time-pickers-3": func(parent core.Widget) {
		ti := core.NewTimeInput(parent).SetTime(time.Now())
		ti.OnChange(func(e events.Event) {
			core.MessageSnackbar(ti, ti.Time.Format("1/2/2006 "+core.SystemSettings.TimeFormat()))
		})
	},
	"widgets/pickers/time-pickers-4": func(parent core.Widget) {
		core.NewDurationInput(parent).SetDuration(3 * time.Second)
	},
	"widgets/pickers/time-pickers-5": func(parent core.Widget) {
		di := core.NewDurationInput(parent).SetDuration(3 * time.Second)
		di.OnChange(func(e events.Event) {
			core.MessageSnackbar(di, di.Duration.String())
		})
	},
	"widgets/media/canvases-0": func(parent core.Widget) {
		core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.FillBox(math32.Vector2{}, math32.Vec2(1, 1), colors.Scheme.Primary.Base)
		})
	},
	"widgets/media/canvases-1": func(parent core.Widget) {
		core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.MoveTo(0, 0)
			pc.LineTo(1, 1)
			pc.StrokeStyle.Color = colors.Scheme.Error.Base
			pc.Stroke()
		})
	},
	"widgets/media/canvases-2": func(parent core.Widget) {
		core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.MoveTo(0, 0)
			pc.LineTo(1, 1)
			pc.StrokeStyle.Color = colors.Scheme.Error.Base
			pc.StrokeStyle.Width.Dp(8)
			pc.ToDots()
			pc.Stroke()
		})
	},
	"widgets/media/canvases-3": func(parent core.Widget) {
		core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.DrawCircle(0.5, 0.5, 0.5)
			pc.FillStyle.Color = colors.Scheme.Success.Base
			pc.Fill()
		})
	},
	"widgets/media/canvases-4": func(parent core.Widget) {
		core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.DrawEllipse(0.5, 0.5, 0.5, 0.25)
			pc.FillStyle.Color = colors.Scheme.Success.Base
			pc.Fill()
		})
	},
	"widgets/media/canvases-5": func(parent core.Widget) {
		core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.DrawEllipticalArc(0.5, 0.5, 0.5, 0.25, math32.Pi, 2*math32.Pi)
			pc.FillStyle.Color = colors.Scheme.Success.Base
			pc.Fill()
		})
	},
	"widgets/media/canvases-6": func(parent core.Widget) {
		core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.DrawRegularPolygon(6, 0.5, 0.5, 0.5, math32.Pi)
			pc.FillStyle.Color = colors.Scheme.Success.Base
			pc.Fill()
		})
	},
	"widgets/media/canvases-7": func(parent core.Widget) {
		core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.MoveTo(0, 0)
			pc.QuadraticTo(0.5, 0.25, 1, 1)
			pc.StrokeStyle.Color = colors.Scheme.Error.Base
			pc.Stroke()
		})
	},
	"widgets/media/canvases-8": func(parent core.Widget) {
		core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.MoveTo(0, 0)
			pc.CubicTo(0.5, 0.25, 0.25, 0.5, 1, 1)
			pc.StrokeStyle.Color = colors.Scheme.Error.Base
			pc.Stroke()
		})
	},
	"widgets/media/canvases-9": func(parent core.Widget) {
		c := core.NewCanvas(parent).SetDraw(func(pc *paint.Context) {
			pc.FillBox(math32.Vector2{}, math32.Vec2(1, 1), colors.Scheme.Warn.Base)
		})
		c.Styler(func(s *styles.Style) {
			s.Min.Set(units.Dp(128))
		})
	},
	"widgets/media/images-0": func(parent core.Widget) {
		errors.Log(core.NewImage(parent).OpenFS(myImage, "image.png"))
	},
	"widgets/media/images-1": func(parent core.Widget) {
		img := core.NewImage(parent)
		errors.Log(img.OpenFS(myImage, "image.png"))
		img.Styler(func(s *styles.Style) {
			s.Min.Set(units.Dp(256))
		})
	},
	"widgets/media/images-2": func(parent core.Widget) {
		img := image.NewRGBA(image.Rect(0, 0, 100, 100))
		draw.Draw(img, image.Rect(10, 5, 100, 90), colors.Scheme.Warn.Container, image.Point{}, draw.Src)
		draw.Draw(img, image.Rect(20, 20, 60, 50), colors.Scheme.Success.Base, image.Point{}, draw.Src)
		draw.Draw(img, image.Rect(60, 70, 80, 100), colors.Scheme.Error.Base, image.Point{}, draw.Src)
		core.NewImage(parent).SetImage(img)
	},
	"widgets/media/svgs-0": func(parent core.Widget) {
		errors.Log(core.NewSVG(parent).OpenFS(mySVG, "icon.svg"))
	},
	"widgets/media/svgs-1": func(parent core.Widget) {
		svg := core.NewSVG(parent)
		errors.Log(svg.OpenFS(mySVG, "icon.svg"))
		svg.Styler(func(s *styles.Style) {
			s.Min.Set(units.Dp(128))
		})
	},
	"widgets/media/svgs-2": func(parent core.Widget) {
		svg := core.NewSVG(parent)
		svg.SetReadOnly(false)
		errors.Log(svg.OpenFS(mySVG, "icon.svg"))
	},
	"widgets/media/svgs-3": func(parent core.Widget) {
		errors.Log(core.NewSVG(parent).ReadString(`<rect width="100" height="100" fill="red"/>`))
	},
	"widgets/other/file-trees-0": func(parent core.Widget) {
		filetree.NewTree(parent).OpenPath(".")
	},
	"widgets/other/file-trees-1": func(parent core.Widget) {
		ft := filetree.NewTree(parent).OpenPath(".")
		ft.OnSelect(func(e events.Event) {
			selected := []string{}
			ft.SelectedFunc(func(n *filetree.Node) {
				selected = append(selected, string(n.Filepath))
			})
			core.MessageSnackbar(ft, strings.Join(selected, " "))
		})
	},
	"widgets/other/func-buttons-0": func(parent core.Widget) {
		core.NewFuncButton(parent).SetFunc(func() {
			core.MessageSnackbar(parent, "Function called")
		})
	},
	"widgets/other/func-buttons-1": func(parent core.Widget) {
		core.NewFuncButton(parent).SetFunc(func() {
			core.MessageSnackbar(parent, "Function called")
		}).SetText("Run").SetTooltip("Click me!")
	},
	"widgets/other/func-buttons-2": func(parent core.Widget) {
		core.NewFuncButton(parent).SetFunc(func(name string, age int) {
			core.MessageSnackbar(parent, name+" is "+strconv.Itoa(age)+" years old")
		})
	},
	"widgets/other/func-buttons-3": func(parent core.Widget) {
		core.NewFuncButton(parent).SetShowReturn(true).SetFunc(func() (string, int) {
			return "Gopher", 35
		})
	},
	"widgets/other/func-buttons-4": func(parent core.Widget) {
		core.NewFuncButton(parent).SetConfirm(true).SetFunc(func() {
			core.MessageSnackbar(parent, "Function called")
		})
	},
	"widgets/other/func-buttons-5": func(parent core.Widget) {
		core.NewFuncButton(parent).SetFunc(core.SettingsWindow).SetConfirm(true)
	},
	"widgets/other/html-0": func(parent core.Widget) {
		htmlcore.ReadHTMLString(htmlcore.NewContext(), parent, `<h1>Hello</h1><button>Click me!</button>`)
	},
	"widgets/other/html-1": func(parent core.Widget) {
		htmlcore.ReadMDString(htmlcore.NewContext(), parent, `# Hello
**This** is *some* ***Markdown*** [text](https://example.com)`)
	},
	"widgets/other/meters-0": func(parent core.Widget) {
		core.NewMeter(parent)
	},
	"widgets/other/meters-1": func(parent core.Widget) {
		core.NewMeter(parent).SetValue(0.7)
	},
	"widgets/other/meters-2": func(parent core.Widget) {
		core.NewMeter(parent).SetMin(5.7).SetMax(18).SetValue(10.2)
	},
	"widgets/other/meters-3": func(parent core.Widget) {
		core.NewMeter(parent).Styler(func(s *styles.Style) {
			s.Direction = styles.Column
		})
	},
	"widgets/other/meters-4": func(parent core.Widget) {
		core.NewMeter(parent).SetType(core.MeterCircle)
	},
	"widgets/other/meters-5": func(parent core.Widget) {
		core.NewMeter(parent).SetType(core.MeterSemicircle)
	},
	"widgets/other/meters-6": func(parent core.Widget) {
		core.NewMeter(parent).SetType(core.MeterCircle).SetText("50%")
	},
	"widgets/other/meters-7": func(parent core.Widget) {
		core.NewMeter(parent).SetType(core.MeterSemicircle).SetText("50%")
	},
	"widgets/other/pages-0": func(parent core.Widget) {
		pages.NewPage(parent).SetSource(fsx.Sub(content, "content"))
	},
	"widgets/other/plots-0": func(parent core.Widget) {
		type Data struct {
			Time       float32
			Population float32
		}
		data := []Data{
			{0, 500},
			{1, 800},
			{2, 1600},
			{3, 1400},
		}
		dt := errors.Log1(table.NewSliceTable(data))
		pe := plotcore.NewPlotEditor(parent).SetTable(dt)
		pe.Params.XAxisColumn = "Time"
		pe.ColumnParams("Population").On = true
	},
	"advanced/styling-0": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.OnWidgetAdded(func(w core.Widget) { // TODO(config)
			w.AsWidget().Styler(func(s *styles.Style) {
				s.Color = colors.Scheme.Error.Base
			})
		})
		core.NewText(fr).SetText("Label")
		core.NewSwitch(fr).SetText("Switch")
		core.NewTextField(fr).SetText("Text field")
	},
	"advanced/styling-1": func(parent core.Widget) {
		fr := core.NewFrame(parent)
		fr.OnWidgetAdded(func(w core.Widget) {
			switch w := w.(type) {
			case *core.Button:
				w.Styler(func(s *styles.Style) {
					s.Border.Radius = styles.BorderRadiusSmall
				})
			}
		})
		core.NewButton(fr).SetText("First")
		core.NewButton(fr).SetText("Second")
		core.NewButton(fr).SetText("Third")
	},
}
