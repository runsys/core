// Code generated by "core generate"; DO NOT EDIT.

package phong

import (
	"cogentcore.org/core/enums"
)

var _GroupsValues = []Groups{0, 1, 2, 3}

// GroupsN is the highest valid value for type Groups, plus one.
const GroupsN Groups = 4

var _GroupsValueMap = map[string]Groups{`CameraGroup`: 0, `ObjectGroup`: 1, `LightGroup`: 2, `TextureGroup`: 3}

var _GroupsDescMap = map[Groups]string{0: ``, 1: ``, 2: ``, 3: ``}

var _GroupsMap = map[Groups]string{0: `CameraGroup`, 1: `ObjectGroup`, 2: `LightGroup`, 3: `TextureGroup`}

// String returns the string representation of this Groups value.
func (i Groups) String() string { return enums.String(i, _GroupsMap) }

// SetString sets the Groups value from its string representation,
// and returns an error if the string is invalid.
func (i *Groups) SetString(s string) error { return enums.SetString(i, s, _GroupsValueMap, "Groups") }

// Int64 returns the Groups value as an int64.
func (i Groups) Int64() int64 { return int64(i) }

// SetInt64 sets the Groups value from an int64.
func (i *Groups) SetInt64(in int64) { *i = Groups(in) }

// Desc returns the description of the Groups value.
func (i Groups) Desc() string { return enums.Desc(i, _GroupsDescMap) }

// GroupsValues returns all possible values for the type Groups.
func GroupsValues() []Groups { return _GroupsValues }

// Values returns all possible values for the type Groups.
func (i Groups) Values() []enums.Enum { return enums.Values(_GroupsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Groups) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Groups) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Groups") }
