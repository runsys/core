//go:build ignore
// +build ignore

package main

import (
	"bytes"
	"fmt"
	"os"
)

func main() {
	f, err := os.Create("scripts.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "// Code generated by \"gen/scripts.go\"; DO NOT EDIT.")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "package web")
	fmt.Fprintln(f)

	gen := []struct {
		Var           string
		Filename      string
		Documentation string
	}{
		{
			Var:           "DefaultAppWorkerJS",
			Filename:      "gen/app-worker.js",
			Documentation: "DefaultAppWorkersJS is the default template used in [MakeAppWorkerJS] to generate app-worker.js.",
		},
		{
			Var:           "WASMExecJSGoCurrent",
			Filename:      "gen/wasm_exec.js",
			Documentation: "WASMExecJSGoCurrent is the wasm_exec.js file for the current version of Go.",
		},
		{
			Var:           "AppJS",
			Filename:      "gen/app.js",
			Documentation: "AppJS is the string used for [AppJSTmpl].",
		},
		{
			Var:           "ManifestJSON",
			Filename:      "gen/manifest.webmanifest",
			Documentation: "ManifestJSON is the string used for [ManifestJSONTmpl].",
		},
		{
			Var:           "AppCSS",
			Filename:      "gen/app.css",
			Documentation: "AppCSS is the string used for app.css.",
		},
		{
			Var:           "IndexHTML",
			Filename:      "gen/index.html",
			Documentation: "IndexHTML is the string used for [IndexHTMLTmpl].",
		},
	}

	fmt.Fprintln(f, "const(")

	for _, g := range gen {
		b, err := os.ReadFile(g.Filename)
		if err != nil {
			panic(err)
		}

		b = bytes.ReplaceAll(b, []byte{'\r'}, nil)

		if g.Documentation != "" {
			fmt.Fprintln(f, "//", g.Documentation)

		}

		fmt.Fprintf(f, "%s = %q", g.Var, b)
		fmt.Fprintln(f)
		fmt.Fprintln(f)
	}

	fmt.Fprintln(f, ")")
}
