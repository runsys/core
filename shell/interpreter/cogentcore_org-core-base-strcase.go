// Code generated by 'yaegi extract cogentcore.org/core/base/strcase'. DO NOT EDIT.

package interpreter

import (
	"cogentcore.org/core/base/strcase"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/base/strcase/strcase"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CamelCase":        reflect.ValueOf(strcase.CamelCase),
		"CasesN":           reflect.ValueOf(strcase.CasesN),
		"CasesValues":      reflect.ValueOf(strcase.CasesValues),
		"FormatList":       reflect.ValueOf(strcase.FormatList),
		"KEBABCase":        reflect.ValueOf(strcase.KEBABCase),
		"KebabCase":        reflect.ValueOf(strcase.KebabCase),
		"LowerCamelCase":   reflect.ValueOf(strcase.LowerCamelCase),
		"LowerCase":        reflect.ValueOf(strcase.LowerCase),
		"Noop":             reflect.ValueOf(strcase.Noop),
		"SNAKECase":        reflect.ValueOf(strcase.SNAKECase),
		"SentenceCase":     reflect.ValueOf(strcase.SentenceCase),
		"Skip":             reflect.ValueOf(strcase.Skip),
		"SkipSplit":        reflect.ValueOf(strcase.SkipSplit),
		"SnakeCase":        reflect.ValueOf(strcase.SnakeCase),
		"Split":            reflect.ValueOf(strcase.Split),
		"TitleCase":        reflect.ValueOf(strcase.TitleCase),
		"To":               reflect.ValueOf(strcase.To),
		"ToCamel":          reflect.ValueOf(strcase.ToCamel),
		"ToKEBAB":          reflect.ValueOf(strcase.ToKEBAB),
		"ToKebab":          reflect.ValueOf(strcase.ToKebab),
		"ToLowerCamel":     reflect.ValueOf(strcase.ToLowerCamel),
		"ToSNAKE":          reflect.ValueOf(strcase.ToSNAKE),
		"ToSentence":       reflect.ValueOf(strcase.ToSentence),
		"ToSnake":          reflect.ValueOf(strcase.ToSnake),
		"ToTitle":          reflect.ValueOf(strcase.ToTitle),
		"ToWordCase":       reflect.ValueOf(strcase.ToWordCase),
		"UpperCase":        reflect.ValueOf(strcase.UpperCase),
		"WordCamelCase":    reflect.ValueOf(strcase.WordCamelCase),
		"WordCasesN":       reflect.ValueOf(strcase.WordCasesN),
		"WordCasesValues":  reflect.ValueOf(strcase.WordCasesValues),
		"WordLowerCase":    reflect.ValueOf(strcase.WordLowerCase),
		"WordOriginal":     reflect.ValueOf(strcase.WordOriginal),
		"WordSentenceCase": reflect.ValueOf(strcase.WordSentenceCase),
		"WordTitleCase":    reflect.ValueOf(strcase.WordTitleCase),
		"WordUpperCase":    reflect.ValueOf(strcase.WordUpperCase),

		// type definitions
		"Cases":       reflect.ValueOf((*strcase.Cases)(nil)),
		"SplitAction": reflect.ValueOf((*strcase.SplitAction)(nil)),
		"WordCases":   reflect.ValueOf((*strcase.WordCases)(nil)),
	}
}
