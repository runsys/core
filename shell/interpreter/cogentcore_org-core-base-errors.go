// Code generated by 'yaegi extract cogentcore.org/core/base/errors'. DO NOT EDIT.

package interpreter

import (
	"cogentcore.org/core/base/errors"
	"github.com/cogentcore/yaegi/interp"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/base/errors/errors"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"As":             reflect.ValueOf(errors.As),
		"CallerInfo":     reflect.ValueOf(errors.CallerInfo),
		"ErrUnsupported": reflect.ValueOf(&errors.ErrUnsupported).Elem(),
		"Is":             reflect.ValueOf(errors.Is),
		"Join":           reflect.ValueOf(errors.Join),
		"Log":            reflect.ValueOf(errors.Log),
		"Log1":           reflect.ValueOf(interp.GenericFunc("func Log1[T any](v T, err error) T { //yaegi:add\n\tif err != nil {\n\t\tslog.Error(err.Error() + \" | \" + CallerInfo())\n\t}\n\treturn v\n}")),
		"Must":           reflect.ValueOf(errors.Must),
		"New":            reflect.ValueOf(errors.New),
		"Unwrap":         reflect.ValueOf(errors.Unwrap),
	}
}
