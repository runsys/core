// Code generated by "core generate -add-types"; DO NOT EDIT.

package randx

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/base/randx.Rand", IDName: "rand", Doc: "Rand provides an interface with most of the standard\nrand.Rand methods, to support the use of either the\nglobal rand generator or a separate Rand source.", Methods: []types.Method{{Name: "Seed", Doc: "Seed uses the provided seed value to initialize the generator to a deterministic state.\nSeed should not be called concurrently with any other Rand method.", Args: []string{"seed"}}, {Name: "Int63", Doc: "Int63 returns a non-negative pseudo-random 63-bit integer as an int64.", Returns: []string{"int64"}}, {Name: "Uint32", Doc: "Uint32 returns a pseudo-random 32-bit value as a uint32.", Returns: []string{"uint32"}}, {Name: "Uint64", Doc: "Uint64 returns a pseudo-random 64-bit value as a uint64.", Returns: []string{"uint64"}}, {Name: "Int31", Doc: "Int31 returns a non-negative pseudo-random 31-bit integer as an int32.", Returns: []string{"int32"}}, {Name: "Int", Doc: "Int returns a non-negative pseudo-random int.", Returns: []string{"int"}}, {Name: "Int63n", Doc: "Int63n returns, as an int64, a non-negative pseudo-random number in the half-open interval [0,n).\nIt panics if n <= 0.", Args: []string{"n"}, Returns: []string{"int64"}}, {Name: "Int31n", Doc: "Int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n).\nIt panics if n <= 0.", Args: []string{"n"}, Returns: []string{"int32"}}, {Name: "Intn", Doc: "Intn returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n).\nIt panics if n <= 0.", Args: []string{"n"}, Returns: []string{"int"}}, {Name: "Float64", Doc: "Float64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0).", Returns: []string{"float64"}}, {Name: "Float32", Doc: "Float32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0).", Returns: []string{"float32"}}, {Name: "NormFloat64", Doc: "NormFloat64 returns a normally distributed float64 in the range\n[-math.MaxFloat64, +math.MaxFloat64] with\nstandard normal distribution (mean = 0, stddev = 1)\nfrom the default Source.\nTo produce a different normal distribution, callers can\nadjust the output using:\n\n\tsample = NormFloat64() * desiredStdDev + desiredMean", Returns: []string{"float64"}}, {Name: "ExpFloat64", Doc: "ExpFloat64 returns an exponentially distributed float64 in the range\n(0, +math.MaxFloat64] with an exponential distribution whose rate parameter\n(lambda) is 1 and whose mean is 1/lambda (1) from the default Source.\nTo produce a distribution with a different rate parameter,\ncallers can adjust the output using:\n\n\tsample = ExpFloat64() / desiredRateParameter", Returns: []string{"float64"}}, {Name: "Perm", Doc: "Perm returns, as a slice of n ints, a pseudo-random permutation of the integers\nin the half-open interval [0,n).", Args: []string{"n"}, Returns: []string{"[]int"}}, {Name: "Shuffle", Doc: "Shuffle pseudo-randomizes the order of elements.\nn is the number of elements. Shuffle panics if n < 0.\nswap swaps the elements with indexes i and j.", Args: []string{"n", "swap"}}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/base/randx.SysRand", IDName: "sys-rand", Doc: "SysRand supports the system random number generator\nfor either a separate rand.Rand source, or, if that\nis nil, the global rand stream.", Fields: []types.Field{{Name: "Rand", Doc: "if non-nil, use this random number source instead of the global default one"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/base/randx.RandParams", IDName: "rand-params", Doc: "RandParams provides parameterized random number generation according to different distributions\nand variance, mean params", Directives: []types.Directive{{Tool: "git", Directive: "add"}}, Fields: []types.Field{{Name: "Dist", Doc: "distribution to generate random numbers from"}, {Name: "Mean", Doc: "mean of random distribution -- typically added to generated random variants"}, {Name: "Var", Doc: "variability parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range, others as noted in RandDists)"}, {Name: "Par", Doc: "extra parameter for distribution (depends on each one)"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/base/randx.RandDists", IDName: "rand-dists", Doc: "RandDists are different random number distributions"})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/base/randx.Seeds", IDName: "seeds", Doc: "Seeds is a set of random seeds, typically used one per Run"})
