// Code generated by "core generate"; DO NOT EDIT.

package imagex

import (
	"cogentcore.org/core/enums"
)

var _FormatsValues = []Formats{0, 1, 2, 3, 4, 5, 6}

// FormatsN is the highest valid value for type Formats, plus one.
const FormatsN Formats = 7

var _FormatsValueMap = map[string]Formats{`None`: 0, `PNG`: 1, `JPEG`: 2, `GIF`: 3, `TIFF`: 4, `BMP`: 5, `WebP`: 6}

var _FormatsDescMap = map[Formats]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``, 6: ``}

var _FormatsMap = map[Formats]string{0: `None`, 1: `PNG`, 2: `JPEG`, 3: `GIF`, 4: `TIFF`, 5: `BMP`, 6: `WebP`}

// String returns the string representation of this Formats value.
func (i Formats) String() string { return enums.String(i, _FormatsMap) }

// SetString sets the Formats value from its string representation,
// and returns an error if the string is invalid.
func (i *Formats) SetString(s string) error {
	return enums.SetString(i, s, _FormatsValueMap, "Formats")
}

// Int64 returns the Formats value as an int64.
func (i Formats) Int64() int64 { return int64(i) }

// SetInt64 sets the Formats value from an int64.
func (i *Formats) SetInt64(in int64) { *i = Formats(in) }

// Desc returns the description of the Formats value.
func (i Formats) Desc() string { return enums.Desc(i, _FormatsDescMap) }

// FormatsValues returns all possible values for the type Formats.
func FormatsValues() []Formats { return _FormatsValues }

// Values returns all possible values for the type Formats.
func (i Formats) Values() []enums.Enum { return enums.Values(_FormatsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Formats) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Formats) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Formats") }
