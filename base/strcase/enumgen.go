// Code generated by "core generate"; DO NOT EDIT.

package strcase

import (
	"cogentcore.org/core/enums"
)

var _CasesValues = []Cases{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

// CasesN is the highest valid value for type Cases, plus one.
const CasesN Cases = 10

var _CasesValueMap = map[string]Cases{`LowerCase`: 0, `UpperCase`: 1, `SnakeCase`: 2, `SNAKECase`: 3, `KebabCase`: 4, `KEBABCase`: 5, `CamelCase`: 6, `LowerCamelCase`: 7, `TitleCase`: 8, `SentenceCase`: 9}

var _CasesDescMap = map[Cases]string{0: `LowerCase is all lower case`, 1: `UpperCase is all UPPER CASE`, 2: `SnakeCase is lower_case_words_with_underscores`, 3: `SNAKECase is UPPER_CASE_WORDS_WITH_UNDERSCORES`, 4: `KebabCase is lower-case-words-with-dashes`, 5: `KEBABCase is UPPER-CASE-WORDS-WITH-DASHES`, 6: `CamelCase is CapitalizedWordsConcatenatedTogether`, 7: `LowerCamelCase is capitalizedWordsConcatenatedTogether, with the first word lower case`, 8: `TitleCase is Captitalized Words With Spaces`, 9: `SentenceCase is Lower case words with spaces, with the first word capitalized`}

var _CasesMap = map[Cases]string{0: `LowerCase`, 1: `UpperCase`, 2: `SnakeCase`, 3: `SNAKECase`, 4: `KebabCase`, 5: `KEBABCase`, 6: `CamelCase`, 7: `LowerCamelCase`, 8: `TitleCase`, 9: `SentenceCase`}

// String returns the string representation of this Cases value.
func (i Cases) String() string { return enums.String(i, _CasesMap) }

// SetString sets the Cases value from its string representation,
// and returns an error if the string is invalid.
func (i *Cases) SetString(s string) error { return enums.SetString(i, s, _CasesValueMap, "Cases") }

// Int64 returns the Cases value as an int64.
func (i Cases) Int64() int64 { return int64(i) }

// SetInt64 sets the Cases value from an int64.
func (i *Cases) SetInt64(in int64) { *i = Cases(in) }

// Desc returns the description of the Cases value.
func (i Cases) Desc() string { return enums.Desc(i, _CasesDescMap) }

// CasesValues returns all possible values for the type Cases.
func CasesValues() []Cases { return _CasesValues }

// Values returns all possible values for the type Cases.
func (i Cases) Values() []enums.Enum { return enums.Values(_CasesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Cases) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Cases) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Cases") }

var _WordCasesValues = []WordCases{0, 1, 2, 3, 4, 5}

// WordCasesN is the highest valid value for type WordCases, plus one.
const WordCasesN WordCases = 6

var _WordCasesValueMap = map[string]WordCases{`Original`: 0, `LowerCase`: 1, `UpperCase`: 2, `TitleCase`: 3, `CamelCase`: 4, `SentenceCase`: 5}

var _WordCasesDescMap = map[WordCases]string{0: `WordOriginal indicates to preserve the original input case.`, 1: `WordLowerCase indicates to make all letters lower case (example).`, 2: `WordUpperCase indicates to make all letters upper case (EXAMPLE).`, 3: `WordTitleCase indicates to make only the first letter upper case (Example).`, 4: `WordCamelCase indicates to make only the first letter upper case, except in the first word, in which all letters are lower case (exampleText).`, 5: `WordSentenceCase indicates to make only the first letter upper case, and only for the first word (all other words have fully lower case letters).`}

var _WordCasesMap = map[WordCases]string{0: `Original`, 1: `LowerCase`, 2: `UpperCase`, 3: `TitleCase`, 4: `CamelCase`, 5: `SentenceCase`}

// String returns the string representation of this WordCases value.
func (i WordCases) String() string { return enums.String(i, _WordCasesMap) }

// SetString sets the WordCases value from its string representation,
// and returns an error if the string is invalid.
func (i *WordCases) SetString(s string) error {
	return enums.SetString(i, s, _WordCasesValueMap, "WordCases")
}

// Int64 returns the WordCases value as an int64.
func (i WordCases) Int64() int64 { return int64(i) }

// SetInt64 sets the WordCases value from an int64.
func (i *WordCases) SetInt64(in int64) { *i = WordCases(in) }

// Desc returns the description of the WordCases value.
func (i WordCases) Desc() string { return enums.Desc(i, _WordCasesDescMap) }

// WordCasesValues returns all possible values for the type WordCases.
func WordCasesValues() []WordCases { return _WordCasesValues }

// Values returns all possible values for the type WordCases.
func (i WordCases) Values() []enums.Enum { return enums.Values(_WordCasesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i WordCases) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *WordCases) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "WordCases")
}
